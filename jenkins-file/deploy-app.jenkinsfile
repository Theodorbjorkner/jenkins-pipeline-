@Library(value="pipeline-shared-lib@main", changelog=false) _
import cicd.config.DeploymentConfigs;
 Map cicdProjectConfigMap = null;

pipeline{
  agent any
  tools {nodejs "Node-JS"}
  options{
  timeout(activity: true, time: 5, unit: 'MINUTES');
  skipDefaultCheckout(true);
  timestamps();
  }

  stages{
  stage("example"){
  steps {
  sh 'npm config ls'
  }
  }

  stage("init"){
  options{
  timeout(time: 5, unit: 'MINUTES');
  }
  steps{
  script{
  // print parameter
  echo("PARAM source_branch: '${params.source_branch}'");

  // clean workspace
  cleanWs();
  // read pipeline configuration
  DeploymentConfigs.jobInstance = this;
  DeploymentConfigs.loadGlobalConfigs();

  // Set initial environment variables
  readPipielineName();


  }
  }
  }
  stage ("Clone project repository"){
  options{
    timeout(time: 3, unit: 'MINUTES');
    }
   steps {
   script{
   final String repositoryName = env.p_PROJECT_NAME;
   final String sourceBranch = params.source_branch;
   cloneProjectRepository(repositoryName, sourceBranch);
   }
   }
  }
  stage("Read project config"){
  options {
  timeout(time:10, unit: "SECONDS");
  }
  steps {
  script{
  cicdProjectConfigMap = readCicdProjectConfig();
  echo("cicdProjectConfigMap:\n" + writeYaml( data: cicdProjectConfigMap, returnText: true));

  }
  }
  }
  stage("Install dependencies") {
   options{
     timeout(time: 3, unit: 'MINUTES');
     }
     steps{
      script{
      sh("ls -la"); // todo remove after debug
      installDependencies();
      sh("ls -la"); // todo remove after debug
      sh("ls -la node_modules"); // todo remove after debug
      }
     }
    }
  }
  post {
    always {
      script{
      cleanWs();
      }
    }
  }
}