@Library(value="pipeline-shared-lib@main", changelog=false) _
import cicd.config.DeploymentConfigs;
 Map cicdProjectConfigMap = null;

pipeline{
  agent any

  tools {nodejs "Node-JS"}
  options{
  timeout(activity: true, time: 5, unit: 'MINUTES');
  skipDefaultCheckout(true);
  timestamps();
  }

  stages{
  stage("example"){
  steps {
  sh 'npm config ls'
  }
  }

  stage("init"){
  options{
  timeout(time: 5, unit: 'MINUTES');
  }
  steps{
  script{
  // print parameter
  echo("PARAM source_branch: '${params.source_branch}'");

  // clean workspace
  cleanWs();
  // read pipeline configuration
  DeploymentConfigs.jobInstance = this;
  DeploymentConfigs.loadGlobalConfigs();

  // Set initial environment variables
  readPipielineName();


  }
  }
  }
  stage ("Clone project repository"){
  options{
    timeout(time: 3, unit: 'MINUTES');
    }
   steps {
   script{
   final String repositoryName = env.p_PROJECT_NAME;
   final String sourceBranch = params.source_branch;
   cloneProjectRepository(repositoryName, sourceBranch);
   }
   }
  }
  stage("Read project config"){
  options {
  timeout(time:10, unit: "SECONDS");
  }
  steps {
  script{
  cicdProjectConfigMap = readCicdProjectConfig();
  echo("cicdProjectConfigMap:\n" + writeYaml( data: cicdProjectConfigMap, returnText: true));

  }
  }
  }
  stage("Install dependencies") {
   options{
     timeout(time: 3, unit: 'MINUTES');
     }
     steps{
      script{
      installDependencies();
      }
     }
    }
    stage("Run unit test"){
    options{
         timeout(time: 1, unit: 'MINUTES');
         }
     steps{
     script{
     runUnitTests();
     }
     }
    }
      stage("static code analysis"){
       steps{
       script{
       sh "docker run -v ${WORKSPACE}:/src --workdir /src returntocorp/semgrep-agent:v1 semgrep-agent --config auto"
       }
      }
      }
     }

      post {
      always{
      script{
             def jobName = env.JOB_NAME
             def buildNumber = env.BUILD_NUMBER
             def pipelineStatus = currentBuild.result ?: 'UNKOWN'
             def bannerColor = pipelineStatus.toUpperCase() == 'SUCCESS' ? 'green': 'red'

             def body = """ <html>
                              <body>
                                  <div style="border: 4px solid ${bannerColor}; padding: 10px;">
                                      <h2> ${jobName} - Build ${buildNumber}</h2>
                                      <div style="background-color: ${bannerColor}; padding: 10px;">
                                          <h3 style="color: white;">Pipeline Status:
                                          ${pipelineStatus.toUpperCase()}</h3>
                                      </div>
                                      <p>Check the <a href="${BUILD_URL}">console output<a/>.</p>
                                  </div>
                              </body>
                          </html>"""
             emailext (
                 subject: "jobName() - Build buildNumber() - pipelineStatus.toUpperCase()",
                 body: body,
                 to: 'theodor.bjorkner@gmail.com',
                 from: 'jenkins@example.com',
                 replyTo: 'jenkins@example.com',
                 mimeType: 'text/html',
                 attachmentsPattern: 'a.txt'
                 )


      }
      }
      }

 // post {
  //  always {
  //    script{
  //    cleanWs();
   //   }
   // }
 // }
  }
