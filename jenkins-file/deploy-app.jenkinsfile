@Library(value="pipeline-shared-lib@main", changelog=false) _
import cicd.config.DeploymentConfigs;
pipeline{
  agent any
  options{
  timeout(activity: true, time: 5, unit: 'MINUTES');
  skipDefaultCheckout(true);
  }
  stages{
  stage("init"){
  options{
  timeout(time: 5, unit: 'MINUTES');
  }
  steps{
  script{
  // print parameter
  echo("PARAM source_branch: '${params.source_branch}'");

  // clean workspace
  cleanWs();
  // read pipeline configuration
  DeploymentConfigs.jobInstance = this;
  DeploymentConfigs.loadGlobalConfigs();

  // Set initial environment variables
  readPipielineName();


  }
  }
  }
  stage ("Clone project repository"){
  options{
    timeout(time: 3, unit: 'MINUTES');
    }
   steps {
   script{
   final String repositoryName = env.p_PROJECT_NAME;
   final String sourceBranch = params.source_branch;
   cloneProjectRepository(repositoryName, sourceBranch);
   }
   }
  }
  }
  post {
    always {
      script{
      cleanWs();
      }
    }
  }
}